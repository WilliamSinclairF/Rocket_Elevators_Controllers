// "this is placed first for clarity but its order would most likely be different in a real coding environment"

SEQUENCE AllSystemsGo
  IF batteriesAreOn = false
    CALL InitialSetup

  ELSE 
    CALL AssignColumnsToFloors
    CALL SetVariables
    CALL systemCheck
    CALL elevatorCheck
    CALL setInitialElevatorLocations
    CALL awaitCall
    CALL awaitFloorRequest
ENDSEQUENCE

CALL AllSystemsGo

SEQUENCE InitialSetup

  SET systemPower TO false
  await operator input
  IF operator input: systemPower = true
  REPEAT UNTIL systemPower = true

  SET batteries TO await operator input
  PROMT FOR OPERATOR INPUT: "How Many Batteries Would You Like To Set Up?"
  REPEAT UNTIL batteries > 1

  FOR EACH battery in batteries:
    PAUSE LOOP THEN 
    PROMT FOR OPERATOR INPUT: "How Many Columns Are There In Battery #(battery at current index)?"
    SET columns = total received from prompts
    REPEAT UNTIL all batteries have columns assigned

    FOR EACH column in columns
      PAUSE LOOP THEN 
      PROMT FOR OPERATOR INPUT: "How Many Elevators Are There In Column #(column at current index)?"
      SET elevators = total received from prompts
    REPEAT UNTIL all columns have elevators assigned

SET batteriesAreOn TO true

CALL BuildingSpecs

ENDSEQUENCE

SEQUENCE BuildingSpecs
  SET floors TO PROMT FOR OPERATOR INPUT: "How Many Floors Are There In The Building?"
  SET basements TO PROMT FOR OPERATOR INPUT: "How Many Basements Are There In The Building?"
  SET batteries TO batteries
  REPEAT UNTIL floors & basements > 0

  FOR EACH floors in BuildingSpecs:
    FOR EACH floor in floors
      SET waitTime TO 0
      SET upCallButtons TO 1
      SET downCallButtons TO 1
      SET floorDisplay TO 1
ENDSEQUENCE

SEQUENCE AssignColumnsToFloors
  FOR EACH column in columns:
    IF index OF column = first index
  //"to make things easier, the last basement is considered the first floor"
      SET StartingFloor = 1
  //"total number of basements + 1 for first floor"
      SET EndingFloor = length OF basements + 1

    "column 1: 1 to 6 + firstfloor(7)"
    "column 2: 8 to 26 (18 floors) + firstfloor(floor 7)"
    "column 3: 27 to 46 (19 floors) + firstfloor(floor 7)"
    "column 4: 47 to 66 (19 floors) + firstfloor(floor 7)"

    ELSE 
      SET gap = (floors - length OF basements) / (columns - 1) -1
      SET StartingFloor = (EndingFloor value OF column at previous index) + 1
      SET EndingFloor = startingFloor OF current index + gap
      IF current index is second index in columns
        SET endingFloor TO endingFloor - 1
        ENDIF
ENDSEQUENCE


SEQUENCE SetVariables
//"if the variable is none, it's a regular old variable with no value. If it's empty, it's an empty list/array"
SET firstFloor TO length OF basements + 1

  FOR EACH battery in batteries
    SET columns TO columns received FROM previous operator input

    FOR EACH column in columns
      SET StartingFloor TO empty
      SET EndingFloor TO empty
      SET columnPower TO false
      SET elevators TO OperatorInput 
      SET systemStatus TO disabled 
      SET requestedFloors TO empty 

      FOR EACH elevator in elevators:
        SET column TO column
        SET defaultFloor TO firstFloor
        SET StartingFloor TO firstFloor + column StartingFloor
        SET EndingFloor TO column EndingFloor
        SET elevatorDisplay TO 1
        SET elevatorDisplayMessage TO none
        SET currentFloor TO none
        SET targetFloor TO none 
        SET nextStops TO empty 
        SET maxElevatorIdle to 30 seconds
        SET floorRequestButtons TO firstfloor AND EACH number FROM column startingFloor TO column endingFloor
        SET direction TO empty   //"will be 1 for UP, -1 for DOWN, 0 for IDLE"
        SET speed to empty
        SET score TO empty 
        SET status TO disabled 
        SET elevatorErrorCode TO none

        CALL AssignColumnsToFloors
ENDSEQUENCE


SEQUENCE systemCheck
FOR EACH battery in batteries
  FOR EACH column in battery
    check doors
    check buttons
    check motors
    IF doors & buttons & motors = true
      SET columnPower TO true
      RETURN true

    ELSE 
        SEQUENCE
          alert operator WITH systemErrorCode
          columnPower OF column = false
          RETURN false & systemErrorCode
        ENDSEQUENCE
ENDSEQUENCE


SEQUENCE elevatorCheck FOR EACH elevator in elevators
  check elevator moving parts
  check elevator weight sensors
  IF moving parts & weight sensors = true
      RETURN true
        ELSE RETURN false & elevatorErrorCode
        ENDSEQUENCE

  IF elevatorCheck of elevator = false
    SEQUENCE
      alert operator WITH elevatorErrorCode and elevator
      SET status OF elevator TO "disabled"
      ELSE SET status OF elevator TO "active"
    ENDSEQUENCE
ENDSEQUENCE
 

SEQUENCE setInitialElevatorLocations
  GET CurrentTime
  GET Date

  CALL IsItPeakTime USING Date, CurrentTime

  IF IsItPeakTime = TRUE 
  RETURN

  ELSE
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET defaultFloor TO firstFloor
ENDSEQUENCE


SEQUENCE IsItPeakTime USING Date, CurrentTime
  CASE Date = Saturday: 
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET maxElevatorIdle TO 5 minutes
    RETURN false

  CASE Date = Sunday: 
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET maxElevatorIdle TO 5 minutes
    RETURN false

  IF CurrentTime > 6:30 AND < 9:30
    FOR EACH column in columns
      FOR EACH elevator in elevators:
        SET maxElevatorIdle TO 0
        SET defaultFloor TO firstFloor
  ENDIF

  ELSE IF CurrentTime > 15:30 AND < 20:30

  FOR EACH column in columns
    FOR EACH elevator in elevators
      IF index of elevator < length OF elevators / 2
        SET defaultFloor TO firstFloor
   
      ELSE
      SET Gap TO (endingFloor - startingFloor) / (length OF elevators IN column / 2)
      SET defaultFloor TO (ROUNDED UP(Gap + startingFloor -2) / 2)

  RETURN TRUE
ENDSEQUENCE


SEQUENCE SetRush USING requestLocation
RushList = EMPTY

FOR EACH floors in BuildingSpecs
  FOR EACH floor in floors
  GET waitTime IF > 45 seconds
  ADD floor, waitTime TO RushList

WHILE RushList NOT EMPTY
  FOR EACH elevator in elevators
    SET defaultFloor to floor WITH highest value IN RushList
    IF RushList = EMPTY
    END LOOP
    CALL setInitialElevatorLocations
ENDSEQUENCE


SEQUENCE elevatorIsRequested USING requestLocation:
  SET selectedColumn = none
  SET elevatorsMovingUp TO EMPTY
  SET elevatorsMovingDown TO EMPTY

  FOR EACH column in columns
    IF column startingFloor >= requestLocation AND requestLocation IS < THAN column endingFloor
      SET selectedColumn TO column

    REPEAT UNTIL selectedColumn IS NOT none

    FOR EACH elevator in selectedColumn elevators
      CALL elevatorCheck
      GET currentFloor OF elevator
      IF currentFloor = requestLocation
        CALL OpenDoors
      ELSE END LOOP
      
      FOR EACH elevator in selectedColumn elevators
          IF requestLocation > currentFloor OF elevator AND elevator direction = 1
            ADD elevator TO elevatorsMovingUp

            IF elevatorsMovingUp = EMPTY:
              SET IdleList TO FILTER elevators in selectedColumn WITH direction = 0

              IF IdleList = EMPTY
                CALL HandleNoIdle USING 1, selectedColumn
              ELSE CALL GetOptimalIdleElevator USING 1

            ELSE CALL HandleUp USING elevatorsMovingUp, requestLocation

          ELSE IF requestLocation < currentFloor OF elevator AND elevator direction = -1
            ADD elevator TO elevatorsMovingDown

            IF elevatorsMovingDown = EMPTY:
              SET IdleList TO FILTER elevators in selectedColumn WITH direction = 0

              IF IdleList = EMPTY
                CALL HandleNoIdle USING 1, selectedColumn
              ELSE CALL GetOptimalIdleElevator USING -1

            ELSE CALL HandleDown USING elevatorsMovingDown, requestLocation

ENDSEQUENCE

SEQUENCE HandleUp USING elevatorsMovingUp, requestLocation

  GET currentFloor OF EACH elevator in elevatorsMovingUp
  SET score OF EACH elevator TO requestLocation - currentFloor OF elevator
  COMPUTE score OF EACH elevator 
  SET ScoreList = EMPTY
  ADD EACH elevator score TO ScoreList
  THEN find lowest 
    IF length OF ScoreList > 1 
      GET score at first index OF ScoreList
    ENDIF

  THEN SET targetFloor OF elevator WITH lowest score to requestLocation

  WHILE targetFloor OF elevator IS NOT currentFloor
    SET direction = 1
    ADD targetFloor TO nextStops
    SORT nextStops BY ascending order
    SET speed TO transit
    FOR EACH stop in nextStops
      IF stop at current index = currentFloor THEN 
        CALL OpenDoors USING elevator

      ELSE SET currentFloor = currentFloor + direction
      CALL ShouldWeStopInTransit USING elevator

      IF targetFloor OF elevator = currentFloor 
        CALL OpenDoors THEN END LOOP 
        SET nextStops TO EMPTY
        SET score OF elevator TO none
        CALL IdleHandler USING elevator
      ELSE LOOP

ENDSEQUENCE

SEQUENCE HandleDown USING elevatorsMovingDown, requestLocation

  GET currentFloor OF EACH elevator in elevatorsMovingDown
  SET score OF EACH elevator TO currentFloor - requestLocation OF elevator
  COMPUTE score OF EACH elevator 
  SET ScoreList = EMPTY
  ADD EACH elevator score TO ScoreList
  THEN find lowest 
    IF length OF ScoreList > 1 
      GET score at first index OF ScoreList
    ENDIF

  THEN SET targetFloor OF elevator WITH lowest score to requestLocation

  WHILE targetFloor OF elevator IS NOT currentFloor
    SET direction = -1
    ADD targetFloor TO nextStops
    SORT nextStops BY descending order
    SET speed TO transit
    FOR EACH stop in nextStops
      IF stop at current index = currentFloor THEN 
        CALL OpenDoors USING elevator
        
      ELSE SET currentFloor = currentFloor + direction
      CALL ShouldWeStopInTransit USING elevator

      IF targetFloor OF elevator = currentFloor 
        CALL OpenDoors THEN END LOOP 
        SET nextStops TO EMPTY
        SET score OF elevator TO none
        CALL IdleHandler USING elevator
      ELSE LOOP

ENDSEQUENCE


SEQUENCE ShouldWeStopInTransit USING elevator
  CASE elevator direction = 1:
    GET requestedFloors FROM elevator column
      FOR EACH requestedFloor in requestedFloors
        IF requestedFloor > elevator currentFloor
        SET GoingUpList TO EMPTY

          FOR EACH elevator in column elevators
            IF direction = 1 ADD elevator TO GoingUpList

            FOR EACH elevator in GoingUpList
              SET Score = requestedFloor - currentFloor
              FIND elevator WITH lowest Score

              IF elevator WITH lowest Score = elevator that called ShouldWeStopInTransit
                ADD requestedFloor TO nextStops

              ELSE ADD requestedFloor TO nextStops OF elevator WITH lowest score

  CASE elevator direction = -1:
    GET requestedFloors FROM elevator column
      FOR EACH requestedFloor in requestedFloors
        IF requestedFloor < elevator currentFloor
        SET GoingDownList TO EMPTY

          FOR EACH elevator in column elevators
            IF direction = -1 ADD elevator TO GoingUpList

            FOR EACH elevator in GoingDownList
              SET Score = currentFloor - requestedFloor
              FIND elevator WITH lowest Score

              IF elevator WITH lowest Score = elevator that called ShouldWeStopInTransit
                ADD requestedFloor TO nextStops

              ELSE ADD requestedFloor TO nextStops OF elevator WITH lowest score
ENDSEQUENCE




SEQUENCE IdleHandler USING elevator
  CALL IsItPeakTime
  SET elevator status TO idle
  SET elevator direction TO 0
  WHILE elevator direction = 0
    SET timer TO maxElevatorIdle
    LOOP UNTIL direction NOT 0 OR timer = 0

    IF direction = 0 CALL elevatorIsRequested USING elevator defaultFloor
    ELSE RETURN
    ENDSEQUENCE
ENDSEQUENCE


SEQUENCE HandleNoIdle USING "DIRECTION", selectedColumn
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET IdleElevatorsList = FILTER elevators, GET ALL WITH direction = "DIRECTION"
      IF IdleElevatorsList = EMPTY, LOOP UNTIL NOT EMPTY
      THEN CALL GetOptimalIdleElevator USING "DIRECTION", requestLocation
ENDSEQUENCE


SEQUENCE GetOptimalIdleElevator USING "DIRECTION", requestLocation
  SET idleElevators TO EMPTY list
  SET selectedColumn TO none

    CASE "DIRECTION" = 1:
    FOR EACH column in columns
      IF column startingFloor IS = OR > THAN requestLocation AND requestLocation < THAN column endingFloor
      SET selectedColumn TO column
      REPEAT UNTIL selectedColumn IS NOT none
        ADD elevator TO idleElevators IF direction = 0

        FOR EACH elevator in idleElevators
          GET currentFloor
          SET score = COMPUTE requestLocation - currentFloor

        GET elevator WITH lowest score
        SET direction TO 1
        SET idleElevators TO EMPTY list
        CALL elevatorIsRequested USING requestLocation


    CASE "DIRECTION" = -1:
        FOR EACH elevator in elevators:
          ADD elevator TO idleElevators IF direction = 0

        FOR EACH elevator in idleElevators
          GET currentFloor
          SET score = COMPUTE requestLocation - currentFloor

        GET elevator WITH lowest score
        SET direction TO -1
        SET idleElevators TO EMPTY list
        CALL elevatorIsRequested USING requestLocation
ENDSEQUENCE


SEQUENCE awaitCall //"sequence that awaits an input on every up and down call button in building"
  WHILE columnPower = true:
  CALL systemCheck every 30 seconds
  FOR EACH upCallButtons AND downCallButtons:
    IF inputHasBeenReceived: 
    SET time = START TIMER FROM 0 seconds
    CALL elevatorIsRequested USING requestLocation, time
    ADD requestLocation TO requestedFloors OF column
    IF elevatorSensor = true THEN 
    SET floor waitTime OF requestLocation TO time
    REMOVE requestLocation FROM requestedFloors OF column
    THEN STOP TIMER, RESET TIMER
    LOOP UNTIL columnPower = false OR status = false
ENDSEQUENCE


SEQUENCE awaitFloorRequest //"sequence that awaits an input on every floor request button in each elevator"
  WHILE columnPower = true:
    FOR EACH column in columns
      FOR EACH elevator in elevators
        FOR EACH floorRequestButton in floorRequestButtons
          SET status = CALL elevatorCheck every 10 seconds
           IF inputValue NOT EMPTY: 
              CALL FloorRequestButtonPressed USING elevator, inputValue
              SET inputValue TO EMPTY
              LOOP UNTIL columnPower = false OR status = false
ENDSEQUENCE


SEQUENCE OpenDoors USING elevator
  SET previousDirection TO elevator direction
  SET elevator direction TO 0
  SET timer to 6 seconds
  SET timer = timer - 1 second every 1 second
  WHILE timer IS NOT 0 seconds
    CALL DoorSecurity USING elevator currentFloor
    CALL WeightSensors USING elevator
    IF DoorSecurity = false
      SET timer = timer + 1 second

      IF WeightSensors = false
        SET timer = infinity
        CALL WeightSensors every second
        RETURN IF WeightSensors = true

    ELSE LOOP UNTIL timer = 0
    THEN SET elevator direction TO previousDirection
ENDSEQUENCE


SEQUENCE DoorSecurity
  SET ObjectDetected TO false
  CALL doorSensors OF elevator currentFloor
    IF ObjectDetected = true
    RETURN false
ENDSEQUENCE


SEQUENCE WeightSensors
  SET maximumWeight TO 2500 pounds
  CALL weightSensor OF elevator
    IF weightSensor > 2500 RETURN false
    WHILE weightSensor > 2500
    CALL alert operator
    LOOP UNTIL weightSensor < 2500
ENDSEQUENCE


"when a target floor is picked with floor request buttons:"
SEQUENCE FloorRequestButtonPressed USING elevator, requestedFloor
  GET elevator currentFloor
  IF currentFloor = requestedFloor CALL OpenDoors
  
  CASE requestedFloor > currentFloor:
    ADD requestedFloor TO nextStops
    SORT nextStops by ascending order
    SET targetFloor = requestedFloor

  CASE requestedFloor < currentFloor:
    IF direction = -1
      SORT nextStops by descending order
      targetFloor = requestedFloor

    ELSE 
      LOOP UNTIL elevator direction = 0 THEN 
      elevator direction = -1
      targetFloor = requestedFloor

ENDSEQUENCE


SEQUENCE ColumnControl USING requestLocation

FOR EACH column in columns
  IF requestLocation IS BETWEEN column startingFloor & column EndingFloor
    ADD requestLocation TO requestedFloors OF column
    REPEAT UNTIL column is found

    CALL AllocateRequest USING requestLocation, column


ENDSEQUENCE

SEQUENCE AllocateRequest USING requestLocation, column
SET PossibleElevators = EMPTY

FOR EACH elevator in column elevators
  IF requestLocation = elevator currentFloor 
    CALL OpenDoors
    REMOVE requestLocation FROM column requestedFloors

  ELSE IF elevator currentFloor < requestLocation & elevator direction = 1
      ADD elevator TO PossibleElevators
      FOR EACH elevator in PossibleElevators
        COMPUTE requestLocation - elevator currentFloor
          FIND lowest value
          GET elevator with lowest value
          ADD requestLocation TO elevator nextStops 
          SORT elevator nextStops BY ascending order

    ELSE IF elevator currentFloor > requestLocation & elevator direction = -1
      ADD elevator TO PossibleElevators
      FOR EACH elevator in PossibleElevators
        COMPUTE elevator currentFloor - requestLocation
          FIND lowest value
          GET elevator with lowest value
          ADD requestLocation TO elevator nextStops 
          SORT elevator nextStops BY descending order

    IF PossibleElevators = EMPTY

      CALL GetOptimalIdleElevator



ENDSEQUENCE