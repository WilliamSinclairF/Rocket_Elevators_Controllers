"Logique de priorisation des ascenceurs"
'En cas d’appel sur une cage en mouvement, quel ascenseur envoyer?
'En fonction de la direction
'En fonction d’appels et de requêtes à plusieurs étages
"Logique de retour à l’origine"
'Est-il préférable d’avoir un ascenseur en attente au rez-de-chaussée?
"Logique de sécurité"
'Routines de vérification de l’état des systèmes avant de les utiliser
'Comportements sécuritaire des équipements (Délais, décisions)
"Logique temporelle"
'Fournir au système une conscience des horaires pour affecter des ascenceurs aux étages les plus susceptibles d’être utilisés à des moments spécifiques de la journée, de la semaine…
'Mesurer les temps d’attente des appels pour assurer que chaque usager atteint sa destination dans des délais acceptable
"Logique de chargement"
'Détecter un ascenseur plein
'Mis en corrélation avec le temps d’attente, comment assurer un service aux étages lorsque les cages quittent l’origine systématiquement pleines?
--------------------

DEFINE Column USING id AND status:
    column_ID: id,
    column_Status: [Online, Offline]
    elevator_amount: 2,
    QueueOfFloorRequest : [],
    minimumFloorNumber : 1,
    maximumFloorNumber : 10,
    numberOfFloors : 10,
    powered : TRUE/FALSE,
    Clock : Actual Time,

    SEQUENCE "createElevatorList" USING elevator_amount
        SET Elevator1 TO INSTANTIATE Elevator WITH 1 AND online
        SET Elevator2 TO INSTANTIATE Elevator WITH 2 AND online
    ENDSEQUENCE

    SEQUENCE "createFloorList" USING numberOfFloors
        FOR i < Columm.numberOfFloors, 
        SET Floor(i) TO INSTANTIATE Floor WITH floor_ID : i
    ENDSEQUENCE
    
    SEQUENCE "Delegate" USING QueueofFloorRequest
    '[ENVOYER LE BON SIGNAL AU BON ASCENCEUR QUI VIENT DES BOUTONS ETAGES]
    ENDSEQUENCE

    SEQUENCE "Halt" USING powered OR emergencyButtonPushed
        IF Elevator.emergencyButtonPushed = TRUE THEN
            SET Column status TO offline
        ENDIF

        IF Column.powered = FALSE THEN
            SET Column status TO offline
        ENDIF    
    ENDSEQUENCE
ENDDEFINE
    
DEFINE Floor USING id:
    floor_ID: id,
    floorCallBouttonUp : TRUE/FALSE (not for last floor),
    floorCallButtonDown : TRUE/FALSE (not for first floor),
    upLight : TRUE/FALSE (not for last floor),
    downLight : TRUE/FALSE (not for first floor),
    floorDoorClose : TRUE/FALSE,
    floorDoorOpen : TRUE/FALSE,
ENDDEFINE


DEFINE Elevator USING id
    ID: id,
    direction : [UP, DOWN, WAIT, IDLE, MAINTENANCE]
    cageCallButton : [1 TO 10]
    currentFloor : [1]
    goingToFloor : []
    queueToFloor : []
    pendingQueue : []
    elevatorDoor : TRUE/FALSE
    elevatorDoorOpen : TRUE/FALSE
    emergencyButtonPushed : TRUE/FALSE
    preferedFloor : []
    Status: [Online, Offline]
    
    SEQUENCE "operate" USING goingToFloor

        IF Column SEQUENCE "delegate" New Floor THEN  
            IF Elevator.direction = "UP" THEN
                ADD Column.newFloor to Elevator.queueToFloor THEN
                SORT Ascending Elevator.queueToFloor[] THEN
                Elevator.goingToFloor = First number in Elevator.queueToFloor[]
            ELSE IF Elevator.direction = "DOWN" THEN
                ADD Column.newFloor to Elevator.queueToFloor THEN
                SORT Descending Elevator.queueToFloor[] THEN
                Elevator.goingToFloor = First number in Elevator.queueToFloor[]
            ENDIF
        ENDIF

        WHILE (Elevator.currentFloor NOT EQUAL Elevator.goingToFloor) 
            IF Elevator.direction == "UP" THEN
                Elevator.currentFloor + 1 
            ELSE IF Elevator.direction == "DOWN" THEN
                Elevator.currentFloor - 1
            ENDIF
        ENDWHILE

        Elevator.goingToFloor = [empty]
        Elevator.queueToFloor = remove first number in Elevator.queueToFloor
        
        Elevator.openDoor()
        WAIT 4 seconds 'door opening'

        Elevator.direction = "IDLE"
        WAIT 7 seconds 'with open door'

        Listen to Elevator.cageCallButton THEN 'Waiting for user to press floor buttons inside elevator'
                    
        IF Elevator.direction = "UP" THEN
            IF Elevator.cageCallButton > Elevator.currentFloor THEN
                ADD Elevator.cageCallButton to Elevator.queueToFloor THEN
                SORT Ascending Elevator.queueToFloor[] THEN
            ENDIF
            ELSE IF Elevator.cageCallButton < Elevator.currentFloor THEN
                ADD Elevator.cageCallButton to Elevator.pendingQueue 'the user board on the opposite side wanted'
            ENDIF
        ENDIF

        ELSE IF Elevator.direction = "DOWN" THEN
                IF Elevator.cageCallButton < Elevator.currentFloor THEN
                ADD Elevator.cageCallButton to Elevator.queueToFloor THEN
                SORT Descending Elevator.queueToFloor[] THEN
            ENDIF
            ELSE IF Elevator.cageCallButton > Elevator.currentFloor THEN
                ADD Elevator.cageCallButton to Elevator.pendingQueue 'the user board on the opposite side wanted'
            ENDIF
        ENDIF

        Elevator.goingToFloor = NEXT Elevator.queueToFloor

        Elevator.closeDoor();
        WAIT 4 seconds 'door closing'

        IF Elevator.goingToFloor NOT EMPTY THEN
            RESTART SEQUENCE "operate"
        ELSE IF Elevator.goingToFloor is EMPTY AND Elevator.pendingQueue is NOT EMPTY THEN
            Elevator.QueueToFloor = Elevator.pendingQueue
                IF Elevator.direction = "UP" THEN
                    Elevator.direction = "DOWN"
                    SORT Descending Elevator.queueToFloor[]
                ELSE IF Elevator.direction = "DOWN" THEN
                    Elevator.direction = "UP"
                    SORT Ascending Elevator.queueToFloor[]
                ENDIF
            Elevator.goingToFloor = NEXT Elevator.queueToFloor
            RESTART SEQUENCE "operate"
        ELSE IF Elevator.QueueToFloor is EMPTY AND Elevator.pendingQueue is EMPTY THEN
            FOR 30 seconds WAIT for Column to send new Elevator.goingToFloor
            ENDFOR THEN 
            Elevator.goingToFloor = Column.preferedFloor
            IF Elevator.goingToFloor < Elevator.currentFloor
                Elevator.direction = "DOWN"
            ELSE IF Elevator.goingToFloor > Elevator.currentFloor
                Elevator.direction = "UP"
            ENDIF
            RESTART SEQUENCE "operate"
        ENDIF
    ENDSEQUENCE
ENDDEFINE

SET Column TO INSTANTIATE Column WITH column_ID : 1 AND column_Status : Online
Elevator start SEQUENCE "operate"