"GENERAL IDEA:

ELEVATORS:
Individual elevators are dumb, they don't know which floors are assigned to them
We counter this by giving each elevator only the buttons that request floors they are allowed to go to.


COLUMNS:
Columns are the ones handling the decisions, they have a minimum and maximum floor assigned to them.
When an elevator is requested from a floor, the elevators assigned to respond to the request
are determined by which column the request was sent from. This will be accomplished by having each
elevator request button send a Request 'object' that contains the identity of the column and the floor it was sent from.


ELEVATOR REQUESTS:
When the HandleElevatorRequests sequence runs, it will give first priority to elevators that are already in transit.
If no elevators are in transit, the IdleHandler sequence will take over and figure which idle elevator should be sent out.
While elevators are moving, they call TransitHandler to help them figure what to do next.


TRANSIT:
TransitHandler is called recursively if a floor from the opposite direction is requested while the elevator is moving.
If the elevator is currently moving, the elevator will go through all calls assigned to it in it's current direction first and then,
the elevator will change it's direction, call TransitHandler again with it's new direction and repeat the same process in reverse.


IDLE:
If the elevator doesn't have any other stops after going through all the up/down stops in it's queue, it will set itself to idle using MakeMeIdle
That sequence sets a timer and waits for the timer to end or the elevator direction to change and if the timer runs out before the elevator receives a new
request, it will send the elevator to its default floor.
The sequence will end if the elevator receives a request before the timer ends.


TIME MANAGEMENT:
The system calls the IsItPeakTime sequence every 5 minutes while it's active to try to be proactive so that if a peak usage period happens, 
it will be ready before it has to take additional measures.
IsItPeakTime checks whether it's the weekend and if it is, it gives elevators a much longer idle time. 
If its morning and a week day, it'll have all elevators on ground floor with no idle time.
If it's time to leave work and go home and also a week day, it will leave half of elevators on ground floor to maintain some service there but the 
other elevators in the column will have a default floor assigned to them based on the minimum and maximum floors of their given column.


MONITORING:
From the moment an elevator is requested, a timer begins and it ends when the elevator arrives. Elevator buttons are also dumb so all they do is 
call EvaluateWaitTime with their location and the timer every time the elevator arrives. They do however also notify the 'Operator' if their timer 
gets to 3 minutes or more because that seems like a time long enough to have a human investigate.


DYNAMIC FLOOR ASSIGNMENT:
Based on the monitoring done by the results of the EvaluateWaitTime sequence, certain floors can be deemed to be 'hot'. If that happens,
the default floor of the elevators assigned to those floors will be set to the 'hot' floor. At first, only one elevator will be assigned but if the 
wait goes over a minute, all elevators handling the column will join in.
"

//"putting this on top for clarity but this would have to be moved down to actually work with code
(a few other sequences are in the same boat)"

SEQUENCE AllSystemsGo
  CALL SetBuildingAndElevatorSpecs
  IF SystemStatus = active
    CALL setInitialElevatorLocations
    CALL ListenForElevatorCalls
    CALL ListenForFloorInput
ENDSEQUENCE


SEQUENCE SetBuildingAndElevatorSpecs
SET SystemStatus TO idle
DISPLAY form with number inputs:
  Floors:
  Basements:
  Batteries:
  Columns:
  Elevators:

  IF form is complete

  SEQUENCE
    SET SystemStatus TO startup
     FOR EACH column in columns
      IF column is at first index
        SET Column StartingFloor = 1
        SET Column EndingFloor = basements + 1

      ELSE SET gap = (floors - length OF basements) / (columns - 1) -1
        SET StartingFloor = (EndingFloor value OF column at previous index) + 1
        SET EndingFloor = startingFloor OF current index + gap
        IF current index is second index in columns
          SET endingFloor TO endingFloor - 1
  ENDSEQUENCE

  CALL SetVariables
    
  ELSE DISPLAY form 

ENDSEQUENCE


SEQUENCE SetVariables
SET Building TO All FROM Form

ADD TO Building:

FOR EACH floor in floors
  SET UpButton TO 1
  SET DownButton TO 1
  SET Request:
    RequestLocation: floor,
    Column: 
      FOR EACH column in columns
        IF column startingFloor AND column endingFloor INCLUDES floor
        SET Column = column

SET firstFloor TO length OF basements + 1

  FOR EACH battery in Batteries
    SET power TO true
    SET Columns TO Columns

    FOR EACH Column in Columns
      SEQUENCE
        //"assigning the same amount of elevators to each column"
        SET elevators TO total amount OF elevators / total amount OF columns
        IF result IS decimal number
        REMOVE 1 elevator FROM last Column
      ENDSEQUENCE

      FOR EACH elevator in elevators:
        SET column TO currentColumn
        SET FloorRequestButtons TO 
          ALL values FROM column startingFloor TO column endingFloor
          ADD firstFloor TO first index position
        SET currentFloor TO none
        SET Score TO none
        SET nextStopsUp TO empty 
        SET nextStopsDown TO empty 
        SET direction TO empty   //"will be 1 for UP, -1 for DOWN, 0 for IDLE"
        SET defaultFloor TO none
        SET maxIdleTime TO none


SET SystemStatus TO active
ENDSEQUENCE

SEQUENCE setInitialElevatorLocations
  GET CurrentTime
  GET Date

  CALL IsItPeakTime USING Date, CurrentTime

  IF IsItPeakTime = TRUE 
  RETURN

  ELSE
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET defaultFloor TO firstFloor
ENDSEQUENCE


SEQUENCE IsItPeakTime USING Date, CurrentTime
  CASE Date = Saturday: 
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET maxElevatorIdle TO 5 minutes
    RETURN false

  CASE Date = Sunday: 
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET maxElevatorIdle TO 5 minutes
    RETURN false

  IF CurrentTime > 6:30 AND < 9:30
    FOR EACH column in columns
      FOR EACH elevator in elevators:
        SET maxElevatorIdle TO 0
        SET defaultFloor TO firstFloor
  ENDIF

  ELSE IF CurrentTime > 15:30 AND < 20:30

  FOR EACH column in columns
    FOR EACH elevator in elevators
      IF index of elevator < length OF elevators / 2
      "sets half of the elevators in every column to first floor"
        SET defaultFloor TO firstFloor
   
      ELSE
      "sets the other half to floors that are within their ranges"
      GET startingFloor, endingFloor FROM column
      SET Gap TO ROUND DOWN(endingFloor - startingFloor) / (amount OF elevators IN column)
      SET defaultFloor TO (startingFloor + (Gap * current index OF elevator))
  RETURN TRUE
ENDSEQUENCE


SEQUENCE EvaluateWaitTime USING requestLocation, timer

  SET WaitingList = EMPTY
  ADD requestLocation, timer TO WaitingList

  WHILE WaitingList NOT EMPTY

    FOR EACH value in WaitingList
      IF value < 30 seconds
        REMOVE value
      
      ELSE IF value < 60 seconds
        GET elevators IN column OF requestLocation
        SET defaultFloor OF first elevator in column TO requestLocation
        SET ALL elevators maxElevatorIdle TO 0

      ELSE IF value > 60 seconds
        GET elevators IN column OF requestLocation
        SET ALL elevators in column TO defaultFloor = requestLocation
        SET ALL elevator maxElevatorIdle TO 0
ENDSEQUENCE


SEQUENCE HandleElevatorRequest USING Request
  CALL IsItPeakTime

  GET RequestLocation FROM Request
  GET Column FROM Request

  FIND Column IN Columns USING Column FROM Request
    FOR EACH elevator in elevators
      IF elevator currentFloor = Request RequestLocation
      CALL OpenDoors
      RETURN
    ENDFOR

//"we do this part if we haven't exited the sequence after the previous loop"
  CALL ElevatorFinder USING Request
  GET ElevatorsGoingUp, ElevatorsGoingDown, IdleElevators FROM ElevatorFinder

  CASE ElevatorsGoingUp > 0 
    CALL UpHandler USING RequestLocation, ElevatorsGoingUp
  ENDCASE

  CASE ElevatorsGoingDown > 0 
    CALL DownHandler USING RequestLocation, ElevatorsGoingDown
  ENDCASE

  CASE ElevatorsGoingUp & ElevatorsGoingDown = EMPTY
    CALL IdleHandler USING IdleElevators, RequestLocation
  ENDCASE

ENDSEQUENCE


SEQUENCE UpHandler USING RequestLocation, ElevatorsGoingUp
  SET Score OF EACH elevator in ElevatorsGoingUp TO:
    RequestLocation - currentFloor OF elevator
    
  THEN FIND elevator WITH lowest Score
    ADD RequestLocation TO elevator nextStopsUp
    SORT nextStopsUp OF elevator BY ascending order
    CALL TransitHandler USING elevator
ENDSEQUENCE


SEQUENCE DownHandler USING RequestLocation, ElevatorsGoingDown
SET Score OF EACH elevator in ElevatorsGoingUp TO:
  currentFloor OF elevator - RequestLocation

  THEN FIND elevator WITH lowest Score
    ADD RequestLocation TO elevator nextStopsDown
    SORT nextStopsDown OF elevator BY descending order
    CALL TransitHandler USING elevator
ENDSEQUENCE


SEQUENCE IdleHandler USING IdleElevators, RequestLocation

  SET IdleUp TO EMPTY
  SET IdleDown TO EMPTY
  SET IdleUpWinner TO none
  SET IdleDownWinner TO none

  FOR EACH elevator in IdleElevators
    IF RequestLocation > currentFloor 
      ADD elevator TO IdleUp
    ELSE ADD elevator TO IdleDown
  ENDFOR

  IF IdleUp > 0 
    GET elevators FROM IdleUp
    FOR EACH elevator in elevators
      SET Score OF EACH elevator in IdleUp TO:
        RequestLocation - currentFloor OF elevator
        ENDFOR
    THEN FIND elevator WITH lowest Score
    SET IdleUpWinner TO elevator

  IF IdleDown > 0
    GET elevators FROM IdleDown
    FOR EACH elevator in elevators
      SET Score OF EACH elevator in ElevatorsGoingUp TO:
        currentFloor OF elevator - RequestLocation
        ENDFOR
    THEN FIND elevator WITH lowest Score
    SET IdleDownWinner TO elevator

  CALL CompareWinners USING IdleUpWinner, IdleDownWinner
ENDSEQUENCE


SEQUENCE CompareWinners USING IdleUpWinner, IdleDownWinner
  CASE IdleUpWinner & IdleDownWinner NOT none:
  COMPARE IdleUpWinner & IdleDownWinner
  FIND lowest
  IF IdleUpWinner
    GET elevator from IdleDownWinner
    SET elevator direction TO 1
    ADD RequestLocation TO elevator nextStopsUp
    CALL TransitHandler USING elevator

  ELSE 
    GET elevator from IdleDownWinner
    SET elevator direction TO -1
    ADD RequestLocation TO elevator nextStopsDown
    CALL TransitHandler USING elevator
    RETURN

  CASE IdleUpWinner NOT none:
    GET elevator from IdleUpWinner
    SET elevator direction TO 1
    ADD RequestLocation TO elevator nextStopsUp
    CALL TransitHandler USING elevator
  RETURN

  CASE IdleDownWinner NOT none:
    GET elevator from IdleDownWinner
    SET elevator direction TO -1
    ADD RequestLocation TO elevator nextStopsDown
    CALL TransitHandler USING elevator
  RETURN
ENDSEQUENCE


SEQUENCE ElevatorFinder USING RequestLocation
  SET ElevatorsGoingUp TO EMPTY
  SET ElevatorsGoingDown TO EMPTY
  SET IdleElevators TO EMPTY

  GET RequestLocation FROM Request
  GET Column FROM Request

  FIND Column IN Columns USING Column FROM Request
    FOR EACH elevator in elevators
      CASE elevator direction = 1:
        IF RequestLocation > elevator currentFloor
        ADD TO ElevatorsGoingUp
      ENDCASE

      CASE elevator direction = -1
        IF RequestLocation < elevator currentFloor
        ADD TO ElevatorsGoingDown
      ENDCASE

      CASE elevator direction = 0
        ADD TO IdleElevators
      ENDCASE
      ENDFOR

  RETURN ElevatorsGoingUp, ElevatorsGoingDown, IdleElevators
ENDSEQUENCE


SEQUENCE HandleFloorRequest USING elevator, Request
  GET RequestedFloor FROM Request

  CASE RequestedFloor > elevator currentFloor:
    ADD RequestedFloor TO elevator nextStopsUp
    SORT nextStopsUp BY ascending order
    CALL TransitHandler USING elevator
  ENDCASE

  CASE RequestedFloor < elevator currentFloor:
      ADD RequestedFloor TO nextStopsDown
      SORT nextStopsDown BY descending order
      CALL TransitHandler USING elevator
  ENDCASE

  CASE RequestedFloor = elevator currentFloor:
    CALL OpenDoors USING elevator
  ENDCASE
ENDSEQUENCE


SEQUENCE TransitHandler USING elevator
  GET direction, nextStopsUp, nextStopsDown FROM elevator
  SET lastStop = none

  CASE direction = 1:
    SET lastStop = last value from nextStopsUp
    WHILE lastStop is not currentFloor:
      IF currentFloor = first value IN nextStopsUp
        CALL OpenDoors USING elevator
        REMOVE value FROM nextStopsUp
      ELSE SET currentFloor = currentFloor + 1
      REPEAT LOOP UNTIL nextStopsUp = EMPTY
      IF nextStopsDown NOT EMPTY
        SET direction = -1
        CALL TransitHandler USING elevator

      ELSE direction = 0
        CALL MakeMeIdle USING elevator

  CASE direction = -1
    SET lastStop = last value from nextStopsDown
    WHILE lastStop is not currentFloor:
      IF currentFloor = first value IN nextStopsDown
        CALL OpenDoors USING elevator
        REMOVE value FROM nextStopsUp
      ELSE SET currentFloor = currentFloor - 1
      REPEAT LOOP UNTIL nextStopsDown = EMPTY
      IF nextStopsUp NOT EMPTY
        SET direction = 1
        CALL TransitHandler USING elevator

      ELSE direction = 0
        CALL MakeMeIdle USING elevator

ENDSEQUENCE


SEQUENCE MakeMeIdle USING elevator
  GET maxIdleTime, direction, currentFloor FROM elevator

  SET countdown using maxIdleTime

  IF countdown = 0 OR direction NOT 0
    RETURN

  ELSE IF countdown = 0 & direction = 0
    IF currentFloor < defaultFloor
      direction = 1
      ADD defaultFloor TO nextStopsUp
      CALL TransitHandler USING elevator

    ELSE direction = -1
      ADD defaultFloor TO nextStopsDown
      CALL TransitHandler USING elevator
ENDSEQUENCE


SEQUENCE OpenDoors USING elevator
  GET direction FROM elevator

  SET previousDirection = direction
  SET direction = 0
  OPEN DOORS

  SET 7 seconds timer
    REMOVE 1 second every second

  WHILE timer > 0
    CALL DoorSensor USING elevator doorSensor
    CALL WeightSensor USING elevator weightSensor
    IF DoorSensor = false
      timer = timer + 1 second

    ELSE IF WeightSensor = false
      timer = infinity
      WHILE timer = infinity
        CALL WeightSensor
        REPEAT UNTIL WeightSensor = true

    ELSE CLOSE DOORS
      SET direction = previousDirection
      PLAY VOICE MESSAGE:
        IF direction = 1
          "GOING UP"
        ELSE "GOING DOWN"

ENDSEQUENCE


SEQUENCE ListenForElevatorCalls
  WHILE SystemStatus = active
    FOR EACH floor in floors
      FOR EACH UpButton in floor
        FOR EACH DownButton in floor
          CALL ListenForInput
          IF ListenForInput SENDS Request
            START timer, INCREMENT BY 1 second every second
            CALL HandleElevatorRequest USING Request
            IF sensor detects elevator STOP timer
              CALL EvaluateWaitTime USING Request, timer
              RESET timer
            IF timer > 3 minutes ALERT OPERATOR
            
ENDSEQUENCE

SEQUENCE ListenForFloorInput
  WHILE SystemStatus = active
    FOR EACH elevator in elevators
      FOR EACH FloorRequestButton in FloorRequestButtons
          CALL ListenForInput
          IF ListenForInput SENDS Request
            CALL HandleFloorRequest USING Request, elevator
ENDSEQUENCE


SEQUENCE DoorSensor
  IF motionIsDetected
    RETURN false

  RETURN true
ENDSEQUENCE


SEQUENCE WeightSensor
  IF elevatorLoadWeight > 2500
    RETURN false
    ALERT OPERATOR
  
  ELSE RETURN true
ENDSEQUENCE


SEQUENCE AllSystemsGo
  CALL SetBuildingAndElevatorSpecs
  IF SystemStatus = active
    CALL setInitialElevatorLocations
    CALL ListenForElevatorCalls
    CALL ListenForFloorInput
    CALL IsItPeakTime EVERY 5 minutes
ENDSEQUENCE

