// "run this to get going!"
SEQUENCE AllSystemsGo
  CALL SetBuildingAndElevatorSpecs
  IF SystemStatus = active
    CALL SetVariables
    CALL setInitialElevatorLocations
    CALL ListenForElevatorCalls
    CALL ListenForFloorInput

  ELSE RETURN
ENDSEQUENCE

// "sequences that set up initial values"
SEQUENCE SetBuildingAndElevatorSpecs 
  SET SystemStatus TO idle
  DISPLAY form with number inputs:
    Floors:
    Basements:
    Batteries:
    Columns:
    Elevators:

  IF form is complete THEN
    SET SystemStatus TO startup THEN:

    //"using this to figure out how many floors each column should have"

    SEQUENCE SetFloorGapBetweenColumns
      SET gapBetweenFloors = (floors - basements) / (columns - 1)

      SET firstFloor = number OF basements + 1

      FOR EACH Column in Columns
        CASE Column is at first index(0):
          SET Column StartingFloor = 1
          SET Column EndingFloor = firstFloor
        ENDCASE

        CASE Column is at second index:
          SET Column startingFloor = firstFloor
          SET endingFloor = firstFloor + gapBetweenFloors
        ENDCASE

        DEFAULT CASE(if all previous cases were not applicable): 
          SET Column startingFloor = endingFloor value of previous index
          SET Column endingFloor = startingFloor + gapBetweenFloors
        ENDCASE
    ENDSEQUENCE
    
  ELSE DISPLAY form 

ENDSEQUENCE

//"after receiving previous inputs, we can now run this to set up the rest of the variables and to activate the system"
SEQUENCE SetVariables
SET Building TO All FROM Form

ADD TO Building:

FOR EACH floor in floors
  SET UpButton TO 1
  IF floor + 1 > Column endingFloor
    SET UpButton TO 0
  SET DownButton TO 1
    IF floor = 1
      SET DownButton TO 0 

  SET Request:
    RequestLocation: floor,
    Column: 
      FOR EACH column in columns
        IF column startingFloor AND column endingFloor INCLUDES floor
        SET Column = column


SET firstFloor TO length OF basements + 1

  FOR EACH battery in Batteries
    SET power TO true
    SET Columns TO Columns

    FOR EACH Column in Columns
      SEQUENCE
        //"assigning the same amount of elevators to each column"
        SET elevators TO total amount OF elevators / total amount OF columns
        IF result IS decimal number
        ROUND result UP
        REMOVE 1 elevator FROM last Column
      ENDSEQUENCE

      FOR EACH elevator in elevators:
        SET column TO currentColumn
        SET FloorRequestButtons TO 
          ALL numbers FROM column startingFloor TO column endingFloor
          THEN ADD firstFloor TO first index position

        SET currentFloor TO none
        SET Score TO none
        SET nextStopsUp TO empty 
        SET nextStopsDown TO empty 
        SET direction TO 0   //"will be 1 for UP, -1 for DOWN, 0 for IDLE"
        SET defaultFloor TO 1
        SET maxIdleTime TO 1

SET SystemStatus TO active
ENDSEQUENCE

//"this sequence is used to figure out where each elevator should sit"
SEQUENCE setInitialElevatorLocations
  GET CurrentTime
  GET Date

  CALL IsItPeakTime USING Date, CurrentTime

  IF IsItPeakTime = TRUE 
  RETURN

  ELSE
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET defaultFloor TO firstFloor
ENDSEQUENCE

//"logic for handling peak times/off times"
SEQUENCE IsItPeakTime USING Date, CurrentTime
  CASE Date = Saturday: 
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET maxElevatorIdle TO 5 minutes
    RETURN false

  CASE Date = Sunday: 
  FOR EACH column in columns
    FOR EACH elevator in elevators
      SET maxElevatorIdle TO 5 minutes
    RETURN false

  IF CurrentTime > 06:30 AND < 09:30
    FOR EACH column in columns
      FOR EACH elevator in elevators:
        SET maxElevatorIdle TO 0
        SET defaultFloor TO firstFloor
  ENDIF

  ELSE IF CurrentTime > 15:30 AND < 20:30

  FOR EACH column in columns
    FOR EACH elevator in elevators
      IF index of elevator < length OF elevators / 2
      "sets half of the elevators in every column to first floor"
        SET defaultFloor TO firstFloor
   
      ELSE
      "sets the other half to floors that are within their ranges"
      GET startingFloor, endingFloor FROM column
      SET Gap TO ROUND DOWN(endingFloor - startingFloor) / (amount OF elevators IN column)
      SET defaultFloor TO (startingFloor + (Gap * current index OF elevator))
  RETURN TRUE
ENDSEQUENCE

// "logic to handle unexpected peaks"
SEQUENCE EvaluateWaitTime USING requestLocation, timer

  SET WaitingList = EMPTY
  ADD requestLocation, timer TO WaitingList

  WHILE WaitingList NOT EMPTY

    FOR EACH value in WaitingList
      IF value < 30 seconds
        REMOVE value
      
      ELSE IF value =< 60 seconds
        GET elevators IN column OF requestLocation
        SET defaultFloor OF first elevator in column TO requestLocation
        SET ALL elevators maxElevatorIdle TO 0

      ELSE IF value > 60 seconds
        GET elevators IN column OF requestLocation
        SET ALL elevators in column TO defaultFloor = requestLocation
        SET ALL elevator maxElevatorIdle TO 0
ENDSEQUENCE


//"handles requests from the up/down floor buttons"
SEQUENCE HandleElevatorRequest USING Request
  CALL IsItPeakTime

  GET Column, RequestLocation, RequestDirection FROM Request 

  FILTER Columns, GET Column that MATCHES Column IN Request
    FOR EACH elevator in elevators
      IF elevator currentFloor = RequestLocation AND elevator direction = 0 OR RequestDirection
      CALL OpenDoors
      RETURN
    ENDFOR

//"we do this part if we haven't exited the sequence after the previous loop"
  CALL ElevatorFinder USING Request
  GET ElevatorsGoingUp, ElevatorsGoingDown, IdleElevators FROM ElevatorFinder

  CASE ElevatorsGoingUp > 0 
    CALL UpHandler USING RequestLocation, ElevatorsGoingUp
  ENDCASE

  CASE ElevatorsGoingDown > 0 
    CALL DownHandler USING RequestLocation, ElevatorsGoingDown
  ENDCASE

  CASE ElevatorsGoingUp & ElevatorsGoingDown = EMPTY
    CALL IdleHandler USING IdleElevators, RequestLocation
  ENDCASE

ENDSEQUENCE

//"this is called by HandleElevatorRequest and returns a list of possible elevators, based on the request location and direction"
SEQUENCE ElevatorFinder USING Request
  SET ElevatorsGoingUp TO EMPTY
  SET ElevatorsGoingDown TO EMPTY
  SET IdleElevators TO EMPTY

  GET RequestLocation, RequestDirection, Column FROM Request

  FIND Column IN Columns USING Column FROM Request
    FOR EACH elevator in elevators
      CASE elevator direction = 1
        IF RequestLocation > elevator currentFloor & elevator direction = RequestDirection
        ADD TO ElevatorsGoingUp
      ENDCASE

      CASE elevator direction = -1
        IF RequestLocation < elevator currentFloor & elevator direction = RequestDirection
        ADD TO ElevatorsGoingDown
      ENDCASE

      CASE elevator direction = 0
        ADD TO IdleElevators
      ENDCASE
      ENDFOR

  RETURN ElevatorsGoingUp, ElevatorsGoingDown, IdleElevators
ENDSEQUENCE

// "logic that goes through elevators that are moving in the up direction to find the nearest one"
SEQUENCE UpHandler USING RequestLocation, ElevatorsGoingUp
  SET Score OF EACH elevator in ElevatorsGoingUp TO:
    RequestLocation - currentFloor OF elevator
    
  THEN FIND elevator WITH lowest Score
    ADD RequestLocation TO elevator nextStopsUp
    SORT nextStopsUp OF elevator BY ascending order
    CALL TransitHandler USING elevator
ENDSEQUENCE

//"same as above but for down"
SEQUENCE DownHandler USING RequestLocation, ElevatorsGoingDown
SET Score OF EACH elevator in ElevatorsGoingUp TO:
  currentFloor OF elevator - RequestLocation

  THEN FIND elevator WITH lowest Score
    ADD RequestLocation TO elevator nextStopsDown
    SORT nextStopsDown OF elevator BY descending order
    CALL TransitHandler USING elevator
ENDSEQUENCE

//"if all elevators are idle, this will run"
SEQUENCE IdleHandler USING IdleElevators, RequestLocation

  SET IdleUp TO EMPTY
  SET IdleDown TO EMPTY
  SET IdleUpWinner TO none
  SET IdleDownWinner TO none

  FOR EACH elevator in IdleElevators
    IF RequestLocation > currentFloor 
      ADD elevator TO IdleUp
    ELSE ADD elevator TO IdleDown
  ENDFOR

  IF IdleUp > 0 
    GET elevators FROM IdleUp
    FOR EACH elevator in elevators
      SET Score OF EACH elevator in IdleUp TO:
        RequestLocation - currentFloor OF elevator
        ENDFOR
    THEN FIND elevator WITH lowest Score
    SET IdleUpWinner TO elevator

  IF IdleDown > 0
    GET elevators FROM IdleDown
    FOR EACH elevator in elevators
      SET Score OF EACH elevator in ElevatorsGoingUp TO:
        currentFloor OF elevator - RequestLocation
        ENDFOR
    THEN FIND elevator WITH lowest Score
    SET IdleDownWinner TO elevator

  CALL CompareWinners USING IdleUpWinner, IdleDownWinner
ENDSEQUENCE

//"this will compare idle elevators and will figure out if it's better to get an elevator from above or below the request location"
SEQUENCE CompareWinners USING IdleUpWinner, IdleDownWinner
  CASE IdleUpWinner & IdleDownWinner NOT none:
  COMPARE IdleUpWinner & IdleDownWinner
  FIND lowest
  IF IdleUpWinner
    GET elevator from IdleDownWinner
    SET elevator direction TO 1
    ADD RequestLocation TO elevator nextStopsUp
    CALL TransitHandler USING elevator

  ELSE 
    GET elevator from IdleDownWinner
    SET elevator direction TO -1
    ADD RequestLocation TO elevator nextStopsDown
    CALL TransitHandler USING elevator
    RETURN

  CASE IdleUpWinner NOT none:
    GET elevator from IdleUpWinner
    SET elevator direction TO 1
    ADD RequestLocation TO elevator nextStopsUp
    CALL TransitHandler USING elevator
  RETURN

  CASE IdleDownWinner NOT none:
    GET elevator from IdleDownWinner
    SET elevator direction TO -1
    ADD RequestLocation TO elevator nextStopsDown
    CALL TransitHandler USING elevator
  RETURN
ENDSEQUENCE

//"handles requests from buttons inside each elevator and contains logic for what should happen if the floor requested is lower than the current floor of the elevator
and the elevator still has higher floors to go through"
SEQUENCE HandleFloorRequest USING elevator, Request
  GET RequestedFloor FROM Request

  CASE RequestedFloor > elevator currentFloor:
    ADD RequestedFloor TO elevator nextStopsUp
    SORT nextStopsUp BY ascending order
    CALL TransitHandler USING elevator
  ENDCASE

  CASE RequestedFloor < elevator currentFloor:
      ADD RequestedFloor TO nextStopsDown
      SORT nextStopsDown BY descending order
      CALL TransitHandler USING elevator
  ENDCASE

  CASE RequestedFloor = elevator currentFloor:
    CALL OpenDoors USING elevator
  ENDCASE
ENDSEQUENCE

//"this is ran by elevators every time they move to figure out if the floor they are at should be serviced or if they should switch directions"
SEQUENCE TransitHandler USING elevator
  GET direction, nextStopsUp, nextStopsDown FROM elevator
  SET lastStop = none

  CASE direction = 1:
    SET lastStop = last value from nextStopsUp
    WHILE lastStop is not currentFloor:
      IF currentFloor = first value IN nextStopsUp
        CALL OpenDoors USING elevator
        REMOVE value FROM nextStopsUp
      ELSE SET currentFloor = currentFloor + 1
      REPEAT LOOP UNTIL nextStopsUp = EMPTY
      IF nextStopsDown NOT EMPTY
        SET direction = -1
        CALL TransitHandler USING elevator

      ELSE direction = 0
        CALL MakeMeIdle USING elevator

  CASE direction = -1
    SET lastStop = last value from nextStopsDown
    WHILE lastStop is not currentFloor:
      IF currentFloor = first value IN nextStopsDown
        CALL OpenDoors USING elevator
        REMOVE value FROM nextStopsUp
      ELSE SET currentFloor = currentFloor - 1
      REPEAT LOOP UNTIL nextStopsDown = EMPTY
      IF nextStopsUp NOT EMPTY
        SET direction = 1
        CALL TransitHandler USING elevator

      ELSE direction = 0
        CALL MakeMeIdle USING elevator

ENDSEQUENCE

//"every elevator needs rest and if they run out of tasks, this will help them relax"
SEQUENCE MakeMeIdle USING elevator
  GET maxIdleTime, direction, currentFloor FROM elevator

  SET countdown using maxIdleTime

  IF countdown = 0 OR direction NOT 0
    RETURN

  ELSE IF countdown = 0 & direction = 0
    IF currentFloor < defaultFloor
      direction = 1
      ADD defaultFloor TO nextStopsUp
      CALL TransitHandler USING elevator

    ELSE direction = -1
      ADD defaultFloor TO nextStopsDown
      CALL TransitHandler USING elevator
ENDSEQUENCE

//"opens doors and makes sure not to hurt anyone when leaving"
SEQUENCE OpenDoors USING elevator
  GET direction FROM elevator

  SET previousDirection = direction
  SET direction = 0
  OPEN DOORS

  SET 7 seconds timer
    REMOVE 1 second every second

  WHILE timer > 0
    CALL DoorSensor USING elevator doorSensor
    CALL WeightSensor USING elevator weightSensor
    IF DoorSensor = false
      timer = timer + 1 second

    ELSE IF WeightSensor = false
      timer = infinity
      WHILE timer = infinity
        CALL WeightSensor
        REPEAT UNTIL WeightSensor = true

    ELSE CLOSE DOORS
      SET direction = previousDirection
      PLAY VOICE MESSAGE:
        IF direction = 1
          "GOING UP"
        ELSE "GOING DOWN"

ENDSEQUENCE

//"runs until the system gets shut down to handle inputs from outside elevators"
SEQUENCE ListenForElevatorCalls
  WHILE SystemStatus = active
    FOR EACH floor in floors
      FOR EACH UpButton in floor
        FOR EACH DownButton in floor
          CALL ListenForInput
          IF ListenForInput SENDS Request
            START timer, INCREMENT BY 1 second every second
            CALL HandleElevatorRequest USING Request
            IF sensor detects elevator STOP timer
              CALL EvaluateWaitTime USING Request, timer
              RESET timer
            IF timer > 3 minutes ALERT OPERATOR
            
ENDSEQUENCE

//"runs until the system gets shut down to handle inputs from inside elevators"
SEQUENCE ListenForFloorInput
  WHILE SystemStatus = active
    FOR EACH elevator in elevators
      FOR EACH FloorRequestButton in FloorRequestButtons
          CALL ListenForInput
          IF ListenForInput SENDS Request
            CALL HandleFloorRequest USING Request, elevator
ENDSEQUENCE

//"a highly advanced motion detector that checks for movement in the door area"
SEQUENCE DoorSensor
  IF motionIsDetected
    RETURN false

  RETURN true
ENDSEQUENCE

//"an advanced weight sensor"
SEQUENCE WeightSensor
  IF elevatorLoadWeight > 2500
    RETURN false
    ALERT OPERATOR
  
  ELSE RETURN true
ENDSEQUENCE
